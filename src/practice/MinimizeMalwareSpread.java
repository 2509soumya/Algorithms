package practice;

import java.util.*;

public class MinimizeMalwareSpread {

    int[] parent;
    int[] rank;

    public int minMalwareSpread(int[][] graph, int[] initial) {

        parent=new int[graph.length];
        rank=new int[graph.length];
        Arrays.fill(parent,-1);

        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph[0].length;j++){
                if(graph[i][j]==1){
                    union(i,j);
                }
            }
        }


        Map<Integer,Integer> uniqparent=new HashMap<>();
        LinkedHashSet<Integer> uniqinitial=new LinkedHashSet<>();

        for(int i=0;i<initial.length;i++){
            int parent=find(initial[i]);
            if(uniqparent.containsKey(parent) && uniqinitial.contains(uniqparent.get(parent))){
                uniqinitial.remove(uniqparent.get(parent));
            }else{
                uniqparent.put(parent,initial[i]);
                uniqinitial.add(initial[i]);
            }
        }

        int malwarespreadstopped=0;
        int ans=initial[0];
        Map<Integer,Integer> parentmembercount=membercount();
        for(Integer node:uniqinitial){
            int parent=find(node);
            int membercount=parentmembercount.get(parent);
            if(membercount>malwarespreadstopped){
                ans=node;
                malwarespreadstopped=membercount;
            }
        }

       return ans;
    }

    public Map<Integer,Integer> membercount(){
        Map<Integer,Integer> parentmembercount=new HashMap<>();
        for(int i=0;i<parent.length;i++){
              if(parent[i]!=-1){
                  int parent=find(i);
                  parentmembercount.putIfAbsent(parent,0);
                  parentmembercount.put(parent,parentmembercount.get(parent)+1);
              }
        }
        return parentmembercount;
    }

    public void union(int node1,int node2){
        int p1=find(node1);
        int p2=find(node2);
        if(p1!=p2){
            if(rank[p1]>=rank[p2]){
                parent[p2]=p1;
                rank[p1]++;
            }else{
                parent[p1]=p2;
                rank[p2]++;
            }
        }
    }

    public int find(int node){
        if(parent[node]==-1){
            return node;
        }
        parent[node]=find(node);
        return parent[node];
    }
}
